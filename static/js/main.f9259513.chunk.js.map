{"version":3,"sources":["App.js","index.js"],"names":["GET_TODOS","gql","TOGGLE_TODO","ADD_TODO","DELETE_TODO","App","React","useState","todoText","setTodoText","useQuery","data","loading","error","useMutation","toggleTodo","addTodo","deleteTodo","a","id","done","variables","console","log","e","preventDefault","trim","text","refetchQueries","query","window","confirm","update","cache","newTodos","readQuery","todos","filter","todo","writeQuery","className","role","aria-label","onSubmit","type","placeholder","onChange","target","value","map","onDoubleClick","handleToggleTodo","onClick","handleDeleteTodo","style","marginLeft","color","transform","cursor","client","ApolloClient","uri","rootNode","document","querySelector","ReactDOM","render"],"mappings":"kQAMMA,EAAYC,YAAH,6FASTC,EAAcD,YAAH,kNAWXE,EAAWF,YAAH,4KAWRG,EAAcH,YAAH,4KA+EFI,MAnEf,WAAgB,IAAD,EACmBC,IAAMC,SAAS,IADlC,mBACNC,EADM,KACIC,EADJ,OAEkBC,mBAASV,GAAjCW,EAFM,EAENA,KAAMC,EAFA,EAEAA,QAASC,EAFT,EAESA,MAFT,EAGSC,sBAAYZ,GAA3Ba,EAHM,sBAIKD,sBAAYX,GAAvBa,EAJM,sBAKQF,sBAAYV,GAA1Ba,EALM,gEAOb,iCAAAC,EAAA,6DAAiCC,EAAjC,EAAiCA,GAAIC,EAArC,EAAqCA,KAArC,SACoBL,EAAW,CAACM,UAAW,CAACF,KAAIC,MAAOA,KADvD,OACOT,EADP,OAEEW,QAAQC,IAAI,6BAA6BZ,GAF3C,4CAPa,kEAWb,WAAgCa,GAAhC,eAAAN,EAAA,yDACEM,EAAEC,iBACGjB,EAASkB,OAFhB,iEAGqBV,EAAQ,CAACK,UAAW,CAACM,KAAMnB,GAAWoB,eAAgB,CAAC,CAACC,MAAO7B,MAHpF,OAGQW,EAHR,OAMEW,QAAQC,IAAI,wBAAyBZ,GACrCF,EAAY,IAPd,4CAXa,kEAqBb,+BAAAS,EAAA,yDAAiCC,EAAjC,EAAiCA,IACZW,OAAOC,QAAQ,gCADpC,gCAIuBd,EAAW,CAACI,UAAW,CAACF,GAAIA,GAAKa,OAAQ,SAAAC,GAE1D,IACMC,EADWD,EAAME,UAAU,CAACN,MAAO7B,IACfoC,MAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKnB,KAAOA,KAC3Dc,EAAMM,WAAW,CAACV,MAAO7B,EAAWW,KAAM,CAACyB,MAAOF,QARxD,OAIUvB,EAJV,OAUIW,QAAQC,IAAIZ,GAVhB,4CArBa,sBAoCb,OAAIE,EAAc,8DACXD,EAAU,4CAEf,sBAAK4B,UAAU,gEAAf,UACE,qBAAIA,UAAU,OAAd,8BACI,sBAAMC,KAAK,MAAMC,aAAW,YAA5B,6BAGJ,uBAAMC,SA5CG,4CA4CyBH,UAAU,MAA5C,UACE,uBAAOA,UAAU,mBACfI,KAAK,OACLC,YAAY,kBACZC,SAAU,SAAAtB,GAAC,OAAIf,EAAYe,EAAEuB,OAAOC,QACpCA,MAAOxC,IAER,wBAAQgC,UAAU,kBAAkBI,KAAK,SAAzC,uBAED,qBAAKJ,UAAU,+CAAf,SACG7B,EAAKyB,MAAMa,KAAI,SAAAX,GAAI,OACpB,oBAAGY,cAAe,kBAvDb,2CAuDmBC,CAAiBb,IAAzC,UACE,sBAAME,UAAS,8BAAyBF,EAAKlB,MAAQ,UAArD,SACGkB,EAAKX,OAER,wBAAQyB,QAAS,kBA3Dd,2CA2DoBC,CAAiBf,IAAOE,UAAU,uBAAuBc,MAAO,CAACC,WAAY,QAASC,MAAO,MAAOC,UAAW,WAAYC,OAAQ,WAA1J,oBAJmDpB,EAAKnB,aClG9DwC,EAAS,I,MAAIC,GAAa,CAC9BC,IAAK,oDAKDC,EAAWC,SAASC,cAAc,SACxCC,IAASC,OACP,cAAC,iBAAD,CAAgBP,OAAQA,EAAxB,SACE,cAAC,EAAD,MAECG,K","file":"static/js/main.f9259513.chunk.js","sourcesContent":["import React from 'react'\nimport {useQuery, useMutation} from '@apollo/react-hooks'\nimport {gql} from 'apollo-boost'\n\n\n//gql allows us to write graphQL queries directly in JS (must be imported from apollo-boost first)\nconst GET_TODOS = gql`\nquery getTodos {\n  todos {\n    done\n    text\n    id\n  }\n}\n`\nconst TOGGLE_TODO = gql`\nmutation toggleTodo($id: uuid!, $done: Boolean!) {\n  update_todos(where: {id: {_eq: $id}}, _set: {done: $done}) {\n    returning {\n      done\n      id\n      text\n    }\n  }\n}\n`\nconst ADD_TODO = gql`\nmutation addTodo($text: String!) {\n  insert_todos(objects: {text: $text}) {\n    returning {\n      id\n      text\n      done\n    }\n  }\n}\n`\nconst DELETE_TODO = gql`\nmutation deleteTodo($id: uuid!) {\n  delete_todos(where: {id: {_eq: $id}}) {\n    returning {\n      id\n      text\n      done\n    }\n  }\n}\n`\n\nfunction App() {\n  const [todoText, setTodoText] = React.useState('')\n  const {data, loading, error} = useQuery(GET_TODOS)\n  const [toggleTodo] =  useMutation(TOGGLE_TODO) //useMutation will return an array with a sepcial function \"toggleTodo\" which we destructure\n  const [addTodo] = useMutation(ADD_TODO)\n  const [deleteTodo] = useMutation(DELETE_TODO)\n\n  async function handleToggleTodo({id, done}) {\n   const data = await toggleTodo({variables: {id, done: !done}}) //we must use async/await or promise chaining here since toggleTodo returns a promise\n    console.log('toggled this todo item ==>',data)\n  }\n  async function handleAddingTodo(e) {\n    e.preventDefault()\n    if (!todoText.trim()) return;\n    const data = await addTodo({variables: {text: todoText}, refetchQueries: [{query: GET_TODOS}]})\n    //refetchQueries allows Apollo to query our newly updated database right away (after adding a new todo) and will display all items instantly. Otherwise, we would have to refresh\n    // to display the newest items due to how Apollo's caching works\n    console.log('newest todo added ==>', data)\n    setTodoText('')\n  }\n\n  async function handleDeleteTodo({id}) {\n   const isConfirmed = window.confirm('Sure you wanna delete this??')\n\n   if (isConfirmed) {\n      const data = await deleteTodo({variables: {id: id}, update: cache => {\n        // this is an alternative to using refetchQueries to instantly display database items\n        const prevData = cache.readQuery({query: GET_TODOS})  //this is longer code but prevents sending unnecessary http fetch requests\n        const newTodos = prevData.todos.filter(todo => todo.id !== id) //\n        cache.writeQuery({query: GET_TODOS, data: {todos: newTodos}})\n      }})\n      console.log(data)\n   }\n  }\n\n\n  if (error) return <h1>Error while fetching data...</h1>\n  return loading ? <h1>Loading...</h1> :  (\n\n    <div className=\"vh-100 code flex flex-column items-center bg-purple white pa3\">\n      <h1 className=\"f2-l\">GraphQL Checklist\n          <span role=\"img\" aria-label=\"Checkmark\">✔️</span>\n      </h1>\n\n      <form onSubmit={handleAddingTodo} className=\"mb3\">\n        <input className=\"pa2 f4 b--dashed\"\n          type=\"text\"\n          placeholder=\"write your todo\"\n          onChange={e => setTodoText(e.target.value)}\n          value={todoText}\n         />\n         <button className=\"pa2 f4 bg-green\" type=\"submit\">Create</button>\n      </form>\n        <div className=\"flex items-center justify-center flex-column\">\n          {data.todos.map(todo => (\n          <p onDoubleClick={() => handleToggleTodo(todo)} key={todo.id}>\n            <span className={`pointer list pa1 f3 ${todo.done && 'strike'}`}>\n              {todo.text}\n            </span>\n            <button onClick={() => handleDeleteTodo(todo)} className=\"bg-transparent bn f4\" style={{marginLeft: '.5rem', color: 'red', transform: 'scale(2)', cursor: 'pointer'}}>&times;</button>\n          </p>\n          ))}\n       </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport ApolloClient from 'apollo-boost'\nimport {ApolloProvider} from '@apollo/react-hooks'\n\nconst client = new ApolloClient({\n  uri: 'https://react-graph-ql.herokuapp.com/v1/graphql'\n})\n\n\n\nconst rootNode = document.querySelector('#root')\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>\n    ,rootNode\n  )\n"],"sourceRoot":""}